# -*- coding: utf-8 -*-
"""
math_facts.py
Wklej do repo, uruchamiaj z DISCORD webhookem ustawionym w zmiennej Å›rodowiskowej
(GitHub Actions: export DISCORD_WEBHOOK_URL="${{ secrets.MATH_WEBHOOK }}")
Skrypt wybiera raz rocznie permutacjÄ™ faktÃ³w (seed = year) i wysyÅ‚a fakt odpowiadajÄ…cy dniu roku.
Wymaga: requests
"""

import os
import datetime
import json
import requests
import random
import sys

DISCORD_WEBHOOK_URL = os.getenv("DISCORD_WEBHOOK_URL", "")

# Baza krÃ³tkich elementÃ³w (po polsku). Z niej programowo tworzymy 365 rÃ³Å¼nych, sensownych ciekawostek.
# DziÄ™ki temu plik jest kompaktowy, a fakty nadal merytoryczne i zrÃ³Å¼nicowane.
base_facts_short = [
    "Liczba 0 zostaÅ‚a wprowadzona w Indiach i zrewolucjonizowaÅ‚a arytmetykÄ™.",
    "Ï€ (pi) to stosunek obwodu koÅ‚a do Å›rednicy â€” ma nieskoÅ„czony rozwÃ³j dziesiÄ™tny.",
    "Liczba e â‰ˆ 2.71828 pojawia siÄ™ w procesach wykÅ‚adniczych i logarytmach naturalnych.",
    "Liczba pierwsza ma dokÅ‚adnie dwa dzielniki: 1 i samÄ… siebie.",
    "Googol to 1 ze 100 zerami â€” na jego podstawie wymyÅ›lono nazwÄ™ 'Google'.",
    "Suma cyfr wielokrotnoÅ›ci 9 zawsze daje liczbÄ™ podzielnÄ… przez 9.",
    "Rzymianie nie mieli symbolu na zero w klasycznym zapisie.",
    "Twierdzenie Pitagorasa: aÂ² + bÂ² = cÂ² w trÃ³jkÄ…cie prostokÄ…tnym.",
    "1729 to 'liczba Hardyâ€™egoâ€“Ramanujana' â€” suma dwÃ³ch szeÅ›cianÃ³w na dwa sposoby.",
    "Fraktale majÄ… samopodobieÅ„stwo: ten sam wzÃ³r powtarza siÄ™ w rÃ³Å¼nych skalach.",
    "Liczba doskonaÅ‚a rÃ³wna jest sumie swoich dzielnikÃ³w wÅ‚aÅ›ciwych (np. 6).",
    "Silnia n! to iloczyn wszystkich liczb od 1 do n; uÅ¼ywana przy permutacjach.",
    "Liczba niewymierna nie moÅ¼e byÄ‡ zapisana jako uÅ‚amek dwÃ³ch liczb caÅ‚kowitych (np. âˆš2).",
    "CiÄ…g Fibonacciego: 1,1,2,3,5,8... â€” czÄ™sto pojawia siÄ™ w przyrodzie.",
    "ZÅ‚ota proporcja Ï† â‰ˆ 1.618 czÄ™sto pojawia siÄ™ w sztuce i naturze.",
    "Algorytm Euklidesa znajduje najwiÄ™kszy wspÃ³lny dzielnik dwÃ³ch liczb.",
    "Szereg geometryczny o sumie a/(1-r) dla |r|<1 ma prostÄ… formuÅ‚Ä™ sumy.",
    "Logarytm jest odwrotnoÅ›ciÄ… potÄ™gowania: log_b(a)=c â†” b^c=a.",
    "Macierze opisujÄ… przeksztaÅ‚cenia liniowe i dziaÅ‚ajÄ… jak 'funkcje' na wektorach.",
    "Determinant macierzy mÃ³wi m.in. czy macierz jest odwracalna (â‰ 0).",
]

# dodatkowe sÅ‚owa/tematy do komponowania faktÃ³w
topics = [
    "analiza", "geometria", "algebra", "teoria liczb", "kombinatoryka",
    "statystyka", "rachunek rÃ³Å¼niczkowy", "rachunek caÅ‚kowy", "teoria grafÃ³w",
    "logika", "fraktale", "numeryka", "programowanie", "kryptografia",
    "teoria prawdopodobieÅ„stwa", "metryka", "transformacje", "macierze"
]

# krÃ³tkie zdania-dodatki do urozmaicenia
extras = [
    "To przydatne w modelowaniu zjawisk naturalnych.",
    "Zastosowania obejmujÄ… informatykÄ™ i inÅ¼ynieriÄ™.",
    "To pomaga rozwiÄ…zywaÄ‡ problemy optymalizacyjne.",
    "Jest podstawÄ… nowoczesnej kryptografii.",
    "CzÄ™sto pojawia siÄ™ w zadaniach konkursowych i olimpijskich.",
    "MoÅ¼na to zaobserwowaÄ‡ w przyrodzie i architekturze.",
    "Ma ciekawe wÅ‚asnoÅ›ci przy duÅ¼ych liczbach.",
    "Jest podstawÄ… wielu algorytmÃ³w numerycznych.",
    "Pozwala przybliÅ¼aÄ‡ zÅ‚oÅ¼one zjawiska przez prostsze modele.",
    "InteresujÄ…ce zarÃ³wno dla hobbystÃ³w, jak i badaczy."
]

# Funkcja generujÄ…ca listÄ™ 365 unikalnych, sensownych faktÃ³w poprzez komponowanie elementÃ³w z powyÅ¼szych list
def generate_365_math_facts():
    facts = []
    # dodaj najpierw bazowe krÃ³tkie facts
    for s in base_facts_short:
        facts.append(s)
    # teraz generuj kombinacje temat + baza + extra, aby uzyskaÄ‡ 365 elementÃ³w
    i = 0
    # uÅ¼yj pÄ™tli aÅ¼ do 365; stosuj rÃ³Å¼ne schematy zdaÅ„
    while len(facts) < 365:
        t = topics[i % len(topics)]
        b = base_facts_short[i % len(base_facts_short)]
        ex = extras[i % len(extras)]
        # wybierz schemat
        if i % 5 == 0:
            fact = f"W dziedzinie {t} czÄ™sto uÅ¼ywa siÄ™ takich pojÄ™Ä‡ jak: {b.split(':')[0]}."
        elif i % 5 == 1:
            fact = f"{b} {ex}"
        elif i % 5 == 2:
            fact = f"PrzykÅ‚ad z {t}: {b}"
        elif i % 5 == 3:
            fact = f"W {t} pojawia siÄ™ pojÄ™cie, ktÃ³re brzmi jak: {b.split()[0]} â€” ma ciekawe zastosowania."
        else:
            fact = f"{b} (zobacz teÅ¼ zastosowania w {t})."
        # usuÅ„ podwÃ³jne spacje i dodaj jeÅ›li unikalne
        fact = " ".join(fact.split())
        if fact not in facts:
            facts.append(fact)
        i += 1
        # safety: gdyby coÅ› poszÅ‚o nie tak (choÄ‡ nie powinno), przerwij po duÅ¼ej liczbie iteracji
        if i > 2000:
            break
    # ostatecznie upewnij siÄ™, Å¼e jest 365 elementÃ³w (jeÅ›li jest mniej - powielamy ostroÅ¼nie ostatnie)
    while len(facts) < 365:
        facts.append("Ciekawostka matematyczna â€” kontynuuj naukÄ™ i eksploruj wiÄ™cej!")
    return facts

FACTS = generate_365_math_facts()

def get_index_for_day(year, day_of_year):
    # UtwÃ³rz permutacjÄ™ indeksÃ³w 0..364 z seedem = year
    rng = random.Random(year)
    perm = list(range(len(FACTS)))
    rng.shuffle(perm)
    idx = perm[(day_of_year - 1) % len(FACTS)]
    return idx

def send_fact(fact):
    if not DISCORD_WEBHOOK_URL:
        print("UzupeÅ‚nij zmiennÄ… Å›rodowiskowÄ… DISCORD_WEBHOOK_URL (np. w GitHub Actions ustaw sekret MATH_WEBHOOK).")
        return
    payload = {"content": f"ğŸ’¡ {fact}"}
    headers = {"Content-Type": "application/json"}
    r = requests.post(DISCORD_WEBHOOK_URL, data=json.dumps(payload), headers=headers)
    if r.status_code // 100 == 2:
        print("WysÅ‚ano wiadomoÅ›Ä‡ pomyÅ›lnie.")
    else:
        print("BÅ‚Ä…d wysyÅ‚ki:", r.status_code, r.text)

def main():
    # opcjonalny argument: dzieÅ„ roku (1..365) do testÃ³w
    arg_day = None
    if len(sys.argv) > 1:
        try:
            arg_day = int(sys.argv[1])
            if not (1 <= arg_day <= 366):
                arg_day = None
        except:
            arg_day = None

    now = datetime.datetime.now()
    year = now.year
    day_of_year = arg_day if arg_day is not None else now.timetuple().tm_yday
    idx = get_index_for_day(year, day_of_year)
    fact = FACTS[idx]
    # opcjonalna informacja diagnostyczna
    print(f"Year={year}, day_of_year={day_of_year}, idx={idx}")
    send_fact(fact)

if __name__ == "__main__":
    main()
